from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    
    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)
    
    def dfs(self, v, visited):
        visited[v] = True
        print(v, end=" ")
        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited)


g = Graph()


num_edges = int(input("Enter the number of edges: "))


print("Enter edges (u v):")
for _ in range(num_edges):
    u, v = map(int, input().split())
    g.add_edge(u, v)


start_vertex = int(input("Enter the starting vertex for DFS: "))


visited = [False] * (max(g.graph.keys()) + 1)


g.dfs(start_vertex, visited)
