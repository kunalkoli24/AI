from collections import defaultdict

class Graph:
    # Constructor
    def __init__(self):
        # Default dictionary to store graph
        self.graph = defaultdict(list)

    # Function to add an edge to graph
    def addEdge(self, u, v):
        self.graph[u].append(v)

    # Function to print a BFS of graph
    def BFS(self, s):
        # Mark all the vertices as not visited
        visited = [False] * (max(self.graph) + 1)
        # Create a queue for BFS
        queue = []
        # Mark the source node as visited and enqueue it
        queue.append(s)
        visited[s] = True
        while queue:
            # Dequeue a vertex from queue and print it
            s = queue.pop(0)
            print(s, end=" ")
            # Get all adjacent vertices of the dequeued vertex s.
            # If an adjacent has not been visited, then mark it visited and enqueue it
            for i in self.graph[s]:
                if not visited[i]:
                    queue.append(i)
                    visited[i] = True

# Driver code
if __name__ == '__main__':
    # Create a graph
    g = Graph()
    num_edges = int(input("Enter the number of edges: "))
    print("Enter edges (u v):")
    for _ in range(num_edges):
        u, v = map(int, input().split())
        g.addEdge(u, v)
    start_vertex = int(input("Enter the starting vertex for BFS: "))
    print("Following is Breadth First Traversal (starting from vertex {}):".format(start_vertex))
    g.BFS(start_vertex)
